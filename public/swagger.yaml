openapi: 3.0.0
info:
  title: API - Sistema de Ordens de Serviço
  version: 1.0.0
  description: API RESTful em PHP para gerenciar clientes, produtos e ordens de serviço

servers:
  - url: http://ordemservico/public
    description: Servidor local

paths:
  /api.php?resource=login:
    post:
      tags: [Auth]
      summary: Autentica um usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        200:
          description: Token JWT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'

  /api.php?resource=clientes:
    get:
      tags: [Clientes]
      summary: Lista todos os clientes
      security:
        - bearerAuth: []
      responses:
        200:
          description: Lista de clientes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cliente'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'

    post:
      tags: [Clientes]
      summary: Cria um novo cliente
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClienteInput'
      responses:
        201:
          description: Cliente criado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cliente'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'

  /api.php?resource=clientes/{id}:
    get:
      tags: [Clientes]
      summary: Obtém um cliente por ID
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: Cliente encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cliente'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'

    put:
      tags: [Clientes]
      summary: Atualiza um cliente
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClienteInput'
      responses:
        200:
          description: Cliente atualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cliente'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [Clientes]
      summary: Remove um cliente
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        204:
          description: Cliente removido
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

  # Repetir o mesmo padrão para produtos e ordens...

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    Id:
      name: id
      in: query
      description: ID do recurso
      required: true
      schema:
        type: integer

  schemas:
    Login:
      type: object
      required: [email, senha]
      properties:
        email:
          type: string
          format: email
        senha:
          type: string

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
        token:
          type: string
        expires_in:
          type: integer
        token_type:
          type: string

    Cliente:
      type: object
      properties:
        id:
          type: integer
        nome:
          type: string
        email:
          type: string
          format: email
        documento:
          type: string
        logradouro:
          type: string
        numero:
          type: string
        complemento:
          type: string
          nullable: true
        bairro:
          type: string
        cidade:
          type: string
        uf:
          type: string
        cep:
          type: string

    ClienteInput:
      type: object
      required: [nome, email]
      properties:
        nome:
          type: string
        email:
          type: string
          format: email
        documento:
          type: string
        logradouro:
          type: string
        numero:
          type: string
        complemento:
          type: string
        bairro:
          type: string
        cidade:
          type: string
        uf:
          type: string
        cep:
          type: string

    # Adicionar schemas para Produto e Ordem...

  responses:
    BadRequest:
      description: Requisição inválida
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string

    Unauthorized:
      description: Não autorizado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Recurso não encontrado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    ServerError:
      description: Erro no servidor
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string